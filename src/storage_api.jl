########## Storage API

abstract type AbstractSalsaStorage end

# The functions for a Salsa Storage are declared below, and should all be implemented for
# concrete instances of AbstractSalsaStorage.
#
# NOTE that most users of Salsa can use the `DefaultStorage` included with Salsa.jl, but
# these are the methods to implement for a custom storage backend.

########## Lookups

# Methods here have a counterpart in the runtime API.

"""
    _memoized_lookup_internal(runtime::Runtime, key::InputKey{F,TT})
    _memoized_lookup_internal(runtime::Runtime, key::DerivedKey{F,TT})

Storage-specific implementation of [`Salsa.memoized_lookup`](@ref). Implementations should
look up `key` in the storage associated with that `runtime`, and return the (cached) value
if it exists.

For derived keys, if no valid cached value is found, compute the value from scratch by
running the derived function `F` indicated in the `DerivedKey{F}` type with the function
arguments extracted from `key.args`. The result is then cached again.

This is the main interface that Salsa uses to access values from the Salsa Storage, when
requested by users.

Providers of a Salsa Storage layer should implement this function for both types of Salsa
keys, by adding a method that dispatches on their specific type of `Runtime`, e.g.:

```julia
function Salsa._memoized_lookup_internal(
    rt::Salsa.RuntimeWithStorage{MyStorage}, key::DerivedKey{F,TT}
) where {F,TT}
    # ...
    # Lookup key in `storage(rt)`, and if not present, execute `F(rt, key.args)` to compute
    # it and cache it.
    # ...
end
```
"""
function _memoized_lookup_internal end

"""
    _unmemoized_input_lookup_internal(runtime::Runtime, input_key::InputKey)

Storage-specific implementation of [`Salsa.unmemoized_input_lookup`](@ref). Implementations
should look up the value of `input_key` without tracking it as a dependency.
"""
function _unmemoized_input_lookup_internal end

"""
    _previous_output_internal(runtime::Runtime)

Storage-specific implementation of [`Salsa.previous_output`](@ref). Implementations can
assume that they're being called from within a `@derived` function and should return the
currently cached value (which at this point must be invalid) for that function and its
arguments.
"""
function _previous_output_internal end

"""
    _unwrap_salsa_value(runtime::Runtime, v)

Some storage engines might need to store values in a wrapper type with additional metadata
(such as validity). This function is the last thing called before returning the value to the
user and gives the storage implementation a chance to unwrap the cached value.
"""
function _unwrap_salsa_value end

########## Writes

"""
    set_input!(runtime::Runtime, input_key::InputKey, value)

Set the value of an input in the storage associated with `runtime`. This function is called
by Salsa's higher-level API such as that generated by the `@declare_input` macro.
"""
function set_input! end

"""
    delete_input!(runtime::Runtime, input_key::InputKey)

Delte an input in the storage associated with `runtime`. This function is called by Salsa's
higher-level API such as that generated by the `@declare_input` macro.
"""
function delete_input! end
